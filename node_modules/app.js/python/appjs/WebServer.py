import BaseHTTPServer, SocketServer, urlparse, mimetypes, os.path

class WebServer(SocketServer.ThreadingMixIn, BaseHTTPServer.HTTPServer):
    app = None
        
    @classmethod
    def serve(cls, host='', port=80, loader=None, app=None):
        server = cls((host, port), WebRequestHandler)
        server.loader = loader
        server.app = app
        server.allow_reuse_address = True
        server.serve_forever()
    
class WebRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
    def do_GET(self):
        # if self.client_address[0] != "127.0.0.1":
            # return self.serveError(401, "Unauthorized")

        self.parseURL()
        if self.path == '/' and self.server.app:
            self.serveApp(self.server.app)
        else:
            paths = self.path.split('/')
            rootName = paths[1]
            if rootName == 'static' or rootName == 'js':
                path, source = self.server.loader.load(self.path)
                if path:
                    self.serveFile(path, source)
                else:
                    self.serveError(404, "File not found")
            else:
                appName = rootName.replace('.', '/')
                if len(paths) > 2:
                    rootName = paths[2]
                    if rootName == 'static' or rootName == 'js':
                        path, source = self.server.loader.load('/%s'%'/'.join(paths[2:]))
                        if path:
                            self.serveFile(path, source)
                        else:
                            self.serveError(404, "File not found")
                        return
                app = self.server.loader.searchApp(appName)
                if app:
                    self.serveApp(app)
                else:
                    self.serveError(404, "File not found")
        
    # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
    
    def serveApp(self, app):
        deploymentTargets = self.query.get('deploy')
        if deploymentTargets:
            [self.deploy(app, buildType) for buildType in deploymentTargets]
        else:
            html = self.renderApp(app, 'compress' in self.query)
            self.serveData(html, 'text/html; charset="utf-8"')
            
    def serveFile(self, path, source=None):
        mimeType, encoding = mimetypes.guess_type(path)
        if not mimeType:
            mimeType = "text/plain"
            
        if not source:
            f = file(path)
            source = f.read()
            f.close()

        self.serveData(source, mimeType)

    def serveData(self, data, mimeType='text/plain', gzip=True):
        if gzip:
            import zlib
            data = zlib.compress(data)

        self.send_response(200)
        self.send_header("Server", 'app.js')
        self.send_header("Content-Type", mimeType)
        self.send_header("Content-Length", len(data))
        if gzip:
            self.send_header("Content-Encoding", 'deflate')
        self.end_headers()
        
        self.wfile.write(data)

    def serveError(self, code, message=None, mimeType='text/plain'):
        self.send_response(code)
        self.send_header("Content-Type", mimeType)
        self.end_headers()
        self.wfile.write(message or code)
    
    @property
    def localURL(self):
        return 'http://%s%s%s' % (self.host, ':%s' % self.port if self.port else '', self.path)

    def parseURL(self):
        host = self.headers.getheader("Host")
        port = 80
        if ":" in host:
            host, port = host.split(":")
            
        self.host = host
        self.port = port

        parsed = urlparse.urlparse(self.path)
        self.path = parsed.path
        self.query = urlparse.parse_qs(parsed.query)
    
    def renderApp(self, app, compress=False):
        from PageMaker import PageMaker
        baseURL = '/'.join(self.path.split('/')[0:2])
        pageMaker = PageMaker(app, self.localURL, baseURL, compress)
        return pageMaker.make()

    def deploy(self, app, buildType):
        try:
            from builders import deploy
            deploy(app, self.localURL, buildType)
            self.serveData('Deployed %s' % buildType)
        except Exception,exc:
            self.serveError(500, str(exc))
            raise
