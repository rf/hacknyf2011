
import os.path

class App(object):
    defaults = {
        'title': '',
        'language': 'en',
        'charset': 'UTF-8',
        'viewport': 'width=device-width,maximum-scale=1.0',
        'webAppCapable': True,
        'statusBarStyle': None,
        'touchIcon': None,
        'startupImage': None,
        'favicon': None,
        'deployments': []
    }
    
    def __init__(self, moduleName, loader):
        self.moduleName = moduleName
        self.loader = loader
        self.appPath = loader.searchScript(moduleName)
        self.meta = self.refreshMeta()        
        
    @property
    def appDirPath(self):
        if self.appPath:
            return os.path.dirname(self.appPath)

    @property
    def packageJSONPath(self):
        if self.appPath:
            base,ext = os.path.splitext(self.appPath) 
            return '%s.json' % base

    @property
    def packageJSON(self):
        if self.appPath:
            jsonPath = self.packageJSONPath
            if os.path.isfile(jsonPath):
                f = file(jsonPath)
                text = f.read()
                f.close()
            
                import json
                return json.loads(text)

        return {}
    
    @property
    def title(self):
        return self.meta.get('title')

    @property
    def language(self):
        return self.meta.get('language')

    @property
    def charset(self):
        return self.meta.get('charset')

    @property
    def viewport(self):
        return self.meta.get('viewport')

    @property
    def webAppCapable(self):
        return 'yes' if self.meta.get('webAppCapable') else None

    @property
    def statusBarStyle(self):
        return self.meta.get('statusBarStyle')
        
    @property
    def touchIcon(self):
        return self.meta.get('touchIcon')

    @property
    def startupImage(self):
        return self.meta.get('startupImage')

    @property
    def favicon(self):
        return self.meta.get('favicon')

    @property
    def deployments(self):
        return self.meta.get('deployments')

    def refreshMeta(self):
        data = self.packageJSON
        for name,value in self.defaults.iteritems():
            if name not in data:
                data[name] = value
                
        return data
