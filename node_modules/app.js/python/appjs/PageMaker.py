
import os.path, re, mimetypes, base64, urlparse, datetime

reCSSURL = re.compile(r'(url\((.*?)\))')

sep = '\n'

# **************************************************************************************************

class PageMaker(object):
    builtinScripts = ['appjs']
    
    def __init__(self, app, localURL, baseURL, compress=False):
        self.app = app
        self.localURL = localURL
        self.baseURL = self.__addTrailingSlash(baseURL)
        self.compress = compress
        self.scripts = {}
        self.styles = {}
        
    def make(self):
        if self.compress:
            self.scripts, self.styles = self.app.loader.traceDependencies(self.app.moduleName, True)
        
        if self.compress:    
            generatedMap = self.generateSource(self.localURL)
        else:
            generatedMap = {}
                
        html = template % {
            'lang': self.app.language,
            'baseURL': self.baseURL,
            'metaTags': self.metaTags(),
            'styleTags': self.styleTags(self.styles.keys()),
            'generatedStyleTags': self.generatedStyleTags(generatedMap),
            'scriptTags': self.scriptTags(self.builtinScripts),
            'cachedScriptTags': self.cachedScriptTags(self.scripts),
            'generatedScriptTags': self.generatedScriptTags(generatedMap),
            'appName': self.app.moduleName
        }
        
        return html
    
    def metaTags(self):
        def iterTags():
            for propertyName, tag in tags:
                value = getattr(self.app, propertyName, None)
                if value:
                    yield tag % value

        def iterIconTags():
            for propertyName, tag in iconTags:
                value = getattr(self.app, propertyName, None)
                if value:
                    yield tag % self.urlForStaticFile(value)
            
        return sep.join([tag for tag in iterTags()] + [tag for tag in iterIconTags()])

    def styleTags(self, styleNames):
        if self.compress:
            urls = [(name,self.urlForStaticFile(name)) for name in styleNames]
            return sep.join([styleInlineTag % (name, self.loadCSS(url)) for name,url in urls])
        else:
            return sep.join([styleTag % self.urlForStaticFile(name) for name in styleNames])

    def scriptTags(self, moduleNames):
        urls = [(name,self.urlForScript(name)) for name in moduleNames]
        if self.compress:
            return sep.join([scriptInlineTag % (name, self.load(url, self.compress)) \
                             for name,url in urls])
        else:
            return sep.join([scriptTag % url for name,url in urls])

    def cachedScriptTags(self, modules):
        urls = [(name, self.urlForScript(name), not pragmas.get('no-munge'), pragmas.get('debug')) \
                for name,pragmas in modules.iteritems()]
        return sep.join([cachedScriptTag % (name, self.load(url, munge) if not debug else '') \
                        for name,url,munge,debug in urls])
    
    def generatedStyleTags(self, items):
        return sep.join([styleInlineTag % (item.get('name'), item.get('source')) \
                for item in items if item.get('type') == 'text/css'])
        
    def generatedScriptTags(self, items):
        return ''
        
    # * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
        
    def urlForScript(self, moduleName):
        base,ext = os.path.splitext(moduleName)
        if not ext:
            moduleName = '%s.js' % moduleName
        url = os.path.join(self.baseURL, 'js', moduleName)
        return url

    def urlForStaticFile(self, moduleName):
        url = os.path.join(self.baseURL, 'static', moduleName)
        return url

    def load(self, url, munge=True):
        url = self.makeURLAbsolute(url)
        path,source = self.app.loader.load(url, self.compress, munge)
        return source

    def loadCSS(self, url):
        url = self.makeURLAbsolute(url)
        path,source = self.app.loader.load(url, self.compress)
        source = self.inlineImages(path, source)
        return source

    def makeURLAbsolute(self, url):
        if url[0] != '/':
            return '/%s' % url
        else:
            return url

    def makeImageURLsAbsolute(self, path, source):
        " Makes relative CSS image urls absolute."

        dirPath = os.path.dirname(path)
        pairs = []
        for originalURL, relativePath in reCSSURL.findall(source):
            absolutePath = os.path.join(dirPath, relativePath)
            absoluteURL = 'url(%s)' % absolutePath
            source = source.replace(originalURL, absoluteURL)
        return source

    def inlineImages(self, path, source):
        " Replaces relative CSS image urls with data URLs."
        
        dirPath = os.path.dirname(path)
        pairs = []
        for originalURL, imageURL in reCSSURL.findall(source):
            parsed = urlparse.urlparse(imageURL)
            if not parsed.scheme:
                absolutePath = os.path.join(dirPath, parsed.path)
                if os.path.isfile(absolutePath):
                    f = file(absolutePath, 'rb')
                    data = f.read()
                    f.close()
                
                    mimeType, encoding = mimetypes.guess_type(absolutePath)
                    encoded = base64.b64encode(data)
                    dataURL = 'url(data:%s;base64,%s)' % (mimeType, encoded)
                    source = source.replace(originalURL, dataURL)

        return source

    def generateSource(self, url):
        import os.path, json
        from subprocess import Popen, PIPE

        command = 'python WebClient.py %s' % url
        os.chdir(os.path.dirname(__file__))
        pipe = Popen(command, shell=True, stdout=PIPE)
        stdout = pipe.stdout
        output = stdout.read()
        return json.loads(output)
    
    def __addTrailingSlash(self, s):
        if s and s[-1] == '/':
            return s
        else:
            return '%s/' % s

# **************************************************************************************************
    
template = """\
<!DOCTYPE html>
<html lang="%(lang)s" app="%(appName)s">
<head>
<base href="%(baseURL)s"/>
%(metaTags)s%(styleTags)s%(generatedStyleTags)s%(cachedScriptTags)s%(generatedScriptTags)s
</head>
<body>
%(scriptTags)s
</body>
</html>"""

tags = [
    ('title', '<title>%s</title>'),
    ('charset', '<meta charset="%s">'),
    ('viewport', '<meta name="viewport" content="%s">'),
    ('webAppCapable', '<meta name="apple-mobile-web-app-capable" content="%s">'),
    ('statusBarStyle', '<meta name="apple-mobile-web-app-status-bar-style" content="%s">'),
]

iconTags = [
    ('touchIcon', '<link rel="apple-touch-icon" href="%s">'),
    ('startupImage', '<link rel="apple-touch-startup-image" href="%s">'),
    ('favicon', '<link rel="icon" href="%s">'),
]

styleTag = '<link rel="stylesheet" type="text/css" href="%s">'
styleInlineTag = '<style type="text/css" id="appjs/static/%s">%s</style>'
scriptTag = '<script type="text/javascript" src="%s"></script>'
scriptInlineTag = '<script type="text/javascript" id="appjs/js/%s">%s</script>'
cachedScriptTag = '<script type="appjs/cached" id="appjs/js/%s">%s</script>'
